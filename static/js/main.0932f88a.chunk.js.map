{"version":3,"sources":["firebase/index.js","firebase/config.js","components/Booklist.jsx","components/Item.jsx","components/Wishlist.jsx","App.jsx","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Booklist","props","useState","bookData","setBookData","wishList","setWishList","getBooksFromFirestore","a","firestore","collection","orderBy","get","itemListArray","bookArray","docs","map","x","id","data","postDataToFirestore","collectionName","postData","add","addedData","submitData","book","title","volumeInfo","isBought","created","Date","updated","useEffect","getData","language","then","response","items","index","key","disabled","find","y","onClick","imageLinks","smallThumbnail","src","alt","authors","publishedDate","href","previewLink","Item","convertFromTimestampToDatetime","timestamp","_d","Y","getFullYear","m","getMonth","toString","padStart","d","getDate","H","getHours","i","getMinutes","s","getSeconds","updateDataOnFirestore","documentId","doc","update","deleteDataOnFirestore","delete","type","value","checked","onChange","e","htmlFor","seconds","WishList","App","languages","getDataFromAPI","keyword","axios","result","basename","process","to","exact","path","render","Wishlist","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0932f88a.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport { firebaseConfig } from './config';\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyBO_5Q68jxj1OaBnqpOMgrG3X7vQoN7Tz4\",\n  authDomain: \"react-booklist-16c81.firebaseapp.com\",\n  databaseURL: \"https://react-booklist-16c81.firebaseio.com\",\n  projectId: \"react-booklist-16c81\",\n  storageBucket: \"react-booklist-16c81.appspot.com\",\n  messagingSenderId: \"579116313224\",\n  appId: \"1:579116313224:web:3ffe0c62754011bc5b0d3d\"\n};\n","import React, { useState, useEffect } from 'react';\nimport firebase from '../firebase';\n\nconst Booklist = props => {\n  const [bookData, setBookData] = useState(null);\n  const [wishList, setWishList] = useState(null);\n\n  const getBooksFromFirestore = async () => {\n    const itemListArray = await firebase.firestore().collection('books')\n      .orderBy('isBought')\n      .orderBy('updated')\n      .orderBy('created')\n      .get();\n    const bookArray = itemListArray.docs.map(x => {\n      return {\n        id: x.id,\n        data: x.data(),\n      }\n    })\n    setWishList(bookArray);\n    return bookArray;\n  }\n\n  // Firestoreにデータを送信する関数\n  const postDataToFirestore = async (collectionName, postData) => {\n    const addedData = await firebase.firestore().collection(collectionName).add(postData);\n    return addedData;\n  }\n\n  // submitボタンクリック時の処理\n  const submitData = async (book) => {\n    const postData = {\n      id: book.id,\n      title: book.volumeInfo.title,\n      isBought: false,\n      created: new Date(),\n      updated: new Date()\n    }\n    const addedData = await postDataToFirestore('books', postData);\n    getBooksFromFirestore();\n  }\n\n  useEffect(() => {\n    const result = getBooksFromFirestore();\n  }, [props])\n\n  useEffect(() => {\n    const result = props.getData?.(props.language).then(response => setBookData(response));\n  }, [props])\n\n  return (\n    <div>\n      <table>\n        <tbody>\n          {\n            bookData === null\n              ? <tr><td>now loading...</td></tr>\n              : bookData.data.items.map((x, index) =>\n                <tr key={index}>\n                  <td>\n                    <button\n                      disabled={wishList?.find((y) => y.data.id === x.id)}\n                      onClick={() => submitData(x)}\n                    >Add to Wish List</button>\n                  </td>\n                  <td>\n                    {\n                      x.volumeInfo.imageLinks?.smallThumbnail\n                        ? <img src={x.volumeInfo.imageLinks?.smallThumbnail} alt=\"Book's thumbnail\" />\n                        : <p>No image</p>\n                    }\n                  </td>\n                  <td>\n                    <p>{x.volumeInfo.title}</p>\n                    <ul>\n                      {\n                        x.volumeInfo.authors?.map((y, index) =>\n                          <li key={index}>{y}</li>\n                        )\n                      }\n                    </ul>\n                    <p>{x.volumeInfo.publishedDate}</p>\n                    <p><a href={x.volumeInfo.previewLink}>Preview</a></p>\n                  </td>\n                </tr>\n              )\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Booklist;\n","import React from 'react';\nimport firebase from '../firebase';\n\nconst Item = ({ index, book, getBooksFromFirestore }) => {\n  const convertFromTimestampToDatetime = timestamp => {\n    const _d = timestamp ? new Date(timestamp * 1000) : new Date();\n    const Y = _d.getFullYear();\n    const m = (_d.getMonth() + 1).toString().padStart(2, '0');\n    const d = _d.getDate().toString().padStart(2, '0');\n    const H = _d.getHours().toString().padStart(2, '0');\n    const i = _d.getMinutes().toString().padStart(2, '0');\n    const s = _d.getSeconds().toString().padStart(2, '0');\n    return `${Y}/${m}/${d} ${H}:${i}:${s}`;\n  }\n\n    const updateDataOnFirestore = async (collectionName, documentId, isBought) => {\n      const updatedData = await firebase.firestore()\n        .collection(collectionName)\n        .doc(documentId)\n        .update({\n          isBought: isBought ? false : true,\n          updated: new Date()\n        });\n      getBooksFromFirestore();\n      return\n    }\n\n    const deleteDataOnFirestore = async (collectionName, documentId) => {\n      const removedData = await firebase.firestore()\n        .collection(collectionName)\n        .doc(documentId)\n        .delete();\n      getBooksFromFirestore();\n      return\n    }\n\n  return (\n    <li key={index} id={book.id}>\n      <input\n        type=\"checkbox\"\n        id={book.id}\n        value={book.id}\n        checked={book.data.isBought}\n        onChange={e => updateDataOnFirestore('books', book.id, book.data.isBought)}\n      />\n      <label htmlFor={book.id}>bought</label><br/>\n      <button\n        value={book.id}\n        onClick={e => deleteDataOnFirestore('books', book.id)}\n      >delete</button>\n      {\n        !book.data.isBought\n          ? <div>\n            <p>{book.data.title}</p>\n            <p>登録日時：{convertFromTimestampToDatetime(book.data.created.seconds)}</p>\n            <p>更新日時：{convertFromTimestampToDatetime(book.data.updated.seconds)}</p>\n          </div>\n          : <div>\n            <p><del>{book.data.title}</del></p>\n            <p><del>登録日時：{convertFromTimestampToDatetime(book.data.created.seconds)}</del></p>\n            <p><del>更新日時：{convertFromTimestampToDatetime(book.data.updated.seconds)}</del></p>\n          </div>\n      }\n    </li>\n  )\n}\nexport default Item;\n","import React, { useState, useEffect } from 'react';\nimport firebase from '../firebase';\nimport Item from './Item';\n\nconst WishList = props => {\n\n  const [wishList, setWishList] = useState(null);\n\n  // firestoreから全データを取得してstateに格納する関数\n  const getBooksFromFirestore = async () => {\n    const itemListArray = await firebase.firestore().collection('books')\n      .orderBy('isBought')\n      .orderBy('updated')\n      .orderBy('created')\n      .get();\n    const bookArray = itemListArray.docs.map(x => {\n      return {\n        id: x.id,\n        data: x.data(),\n      }\n    })\n    setWishList(bookArray);\n    return bookArray;\n  }\n\n  // useEffectを利用してFirestoreからデータの一覧を取得．\n  useEffect(() => {\n    const result = getBooksFromFirestore();\n  }, [props])\n\n  return (\n    <div>\n      {/* <InputForm\n        getTodosFromFirestore={getTodosFromFirestore}\n      /> */}\n      <ul>\n        {\n          wishList?.map((x, index) =>\n            <Item\n              key={index}\n              book={x}\n              index={index}\n              getBooksFromFirestore={getBooksFromFirestore}\n            />\n          )\n        }\n      </ul>\n    </div>\n  );\n}\nexport default WishList;\n","import React from 'react';\nimport Booklist from './components/Booklist';\nimport Wishlist from './components/Wishlist';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst App = () => {\n  const languages = ['React', 'Vue', 'Angular'];\n  const getDataFromAPI = async keyword => {\n    const requestUrl = 'https://www.googleapis.com/books/v1/volumes?q=intitle:';\n    const result = await axios.get(`${requestUrl}${keyword}`);\n    return result;\n  }\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div>\n        <h1>react app</h1>\n        <ul>\n          <li><Link to='/'>Wish list</Link></li>\n          <li><Link to='/react'>React</Link></li>\n          <li><Link to='/vue'>Vue</Link></li>\n          <li><Link to='/angular'>Angular</Link></li>\n        </ul>\n        <hr/>\n        <Route\n          exact\n          path='/'\n          render={\n            props =>\n              <Wishlist />\n          }\n        />\n        <Route\n          exact\n          path='/react'\n          render={\n            props =>\n              <Booklist\n                language={languages[0]}\n                getData={keyword => getDataFromAPI(keyword)}\n              />\n          }\n        />\n        <Route\n          exact\n          path='/vue'\n          render={\n            props =>\n              <Booklist\n                language={languages[1]}\n                getData={keyword => getDataFromAPI(keyword)}\n              />\n          }\n        />\n        <Route\n          exact\n          path='/angular'\n          render={\n            props =>\n              <Booklist\n                language={languages[2]}\n                getData={keyword => getDataFromAPI(keyword)}\n              />\n          }\n        />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}